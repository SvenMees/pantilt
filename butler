/****************** SERVER CODE ****************/
// SVENMEES 14/01/2016
//  gcc -o butler -I ../src ../src/bcm2835.c .c
#include <bcm2835.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
//
#define PIN0  RPI_V2_GPIO_P1_11
#define PIN1  RPI_V2_GPIO_P1_12
#define PIN2  RPI_V2_GPIO_P1_13
#define PIN3  RPI_V2_GPIO_P1_15
#define PIN4  RPI_V2_GPIO_P1_16
#define PIN5  RPI_V2_GPIO_P1_18
#define PIN6  RPI_V2_GPIO_P1_08
#define PIN7  RPI_V2_GPIO_P1_07

/* function prototype */

void dostuff(int);
void error(const char *msg);
void schrijfpinnen(char*);

int main(){
  int welcomeSocket, newSocket,pid ;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  struct sockaddr_storage serverStorage;
  socklen_t addr_size;


    if (!bcm2835_init())
        return 1;
 // Set the pin output
    bcm2835_gpio_fsel(PIN0, BCM2835_GPIO_FSEL_OUTP);
    bcm2835_gpio_fsel(PIN1, BCM2835_GPIO_FSEL_OUTP);
	bcm2835_gpio_fsel(PIN2, BCM2835_GPIO_FSEL_OUTP);
    bcm2835_gpio_fsel(PIN3, BCM2835_GPIO_FSEL_OUTP);
    bcm2835_gpio_fsel(PIN4, BCM2835_GPIO_FSEL_OUTP);
    bcm2835_gpio_fsel(PIN5, BCM2835_GPIO_FSEL_OUTP);
    bcm2835_gpio_fsel(PIN6, BCM2835_GPIO_FSEL_OUTP);
    bcm2835_gpio_fsel(PIN7, BCM2835_GPIO_FSEL_OUTP);
	
	
  /*---- Create the socket. The three arguments are: ----*/
  /* 1) Internet domain 2) Stream socket 3) Default protocol (TCP in this case) */
  welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);

  /*---- Configure settings of the server address struct ----*/
  /* Address family = Internet */
  serverAddr.sin_family = AF_INET;
  /* Set port number, using htons function to use proper byte order */
  serverAddr.sin_port = htons(64000);
  /* Set IP address to localhost */
  serverAddr.sin_addr.s_addr = inet_addr("192.168.69.148");
  /* Set all bits of the padding field to 0 */
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

  /*---- Bind the address struct to the socket ----*/
  bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

  /*---- Listen on the socket, with 5 max connection requests queued ----*/
  if(listen(welcomeSocket,5)==0)
    printf("Listening\n");
  else
    printf("Error\n");

  /*---- Accept call creates a new socket for the incoming connection ----*/
  addr_size = sizeof serverStorage;
  
  while (1)
{
        newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);
        if (newSocket < 0)
                error("Error op accepten");
        pid = fork();
        if (pid < 0)
                error("ERROR on fork");
        if (pid == 0){
                close(welcomeSocket);
                dostuff(newSocket);
                exit(0);}

        else close(newSocket);
} /* end of while */

close(welcomeSocket); //verbinding socket sluiten

 /* strcpy(buffer,"Hello World\n");
  send(newSocket,buffer,13,0);
  printf("ontvang vanaf nu");
  recv(newSocket, buffer, 1024, 0);
  printf("Data: %s",buffer);
 */

  return 0;
}
void dostuff (int sock)
{
   int n;
   char buffer[256];
   bzero(buffer,256);
   n = read(sock,buffer,255);
   if (n < 0) error("ERROR reading from socket");
   printf("the message: %s\n",buffer);
   schrijfpinnen(buffer);
   n = write(sock,"I got your message",18);
   if (n < 0) error("ERROR writing to socket");
}

void schrijfpinnen(char *bericht)
{  //inkomend bericht moet zo opgedeeld zijn "X 250 Y 250"
        char *token;
        char een[5]; //X
        char twee[10];//getal
        char drie[5];//Y
        char vier[10];//getal
        char vijf[10];//getal snelheid
        char leds[8]= {PIN0,PIN1,PIN2,PIN3,PIN4,PIN5,PIN6,PIN7};

        token = strtok(bericht," ");
        strcpy(een,token);
        token = strtok(NULL, " ");
        strcpy(twee,token);
        token = strtok(NULL, " ");
        strcpy(drie,token);
        token = strtok(NULL, " ");
        strcpy(vier,token);
        token = strtok(NULL, " ");
        strcpy(vijf,token);
        token = strtok(NULL, " ");

        printf( "bericht is : %s %s %s %s %s\n",een ,twee, drie, vier, vijf );

int a = atoi(vijf);
int i,j;
int stappenx= atoi(twee);
int stappeny= atoi(vier);
char str1[3]= {'X','\0'};
char str2[3]= {'Y','\0'};

if (strcmp(str1,een) == 0) //motor X
   {
    if(stappenx>0){//als positief stappen zijn
        j=3;
        for (i=0;i<stappenx;i--)
        {
         bcm2835_gpio_write(leds[j], HIGH);
         bcm2835_delay(a);
         bcm2835_gpio_write(leds[j], LOW);
        j--;
        if(j==-1){j=3;}
        }
        }
    if(stappenx<0){// als negatief stappen zijn
		j=0;
        for (i=0;i<stappenx;i++)
        {
         bcm2835_gpio_write(leds[j], HIGH);
         bcm2835_delay(a);
         bcm2835_gpio_write(leds[j], LOW);
        j++;
        if(j==4){j=0;}
        }
        }
   }
if (strcmp(str2,drie) == 0) //motor Y
   {
    if(stappeny>0){//als positief stappen zijn
        j=4;
        for (i=0;i<stappeny;i++)
        {
         bcm2835_gpio_write(leds[j], HIGH);
         bcm2835_delay(a);
         bcm2835_gpio_write(leds[j], LOW);
        j++;
        if(j==8){j=4;}
        }
        }
    if(stappeny<0){// als negatief stappen zijn
		j=7;
        for (i=0;i>stappeny;i--)
        {
         bcm2835_gpio_write(leds[j], HIGH);
         bcm2835_delay(a);
         bcm2835_gpio_write(leds[j], LOW);
        j--;
        if(j==3){j=7;}
        }

        }
   }
   bcm2835_close();
}
